今天把android环境从台式机移到笔记本，懒得下载平台，就直接把台式机的android-sdk-linux_x86整个目录拷贝过来，谁知道tools里面的工具都没有执行权限，chmod +x tools/* 后，还是不能在eclipse里面添加一个avd，提示

[2011-09-15 20:59:28 - SDK Manager] Failed to create the SD card.

[2011-09-15 20:59:28 - SDK Manager] Failed to create sdcard in the AVD folder.

于是我在台式机用 tar -zcvf 打包一下再在笔记本解压，而不是整个目录拷贝，一解压tools里面就有执行权限了，但是还是报同样错误

上网查了一下，有两个原因

1.设置android sdk下的tools权限为可执行权限。

2.没有安装ia32-libs的原因，在64位的ubantu下是不能跑32位程序的，除非装了这个。使用sudo apt-get install ia32-libs

我给过执行权限了，所以很明显是第二个，赶紧装上了试试，还真成功了。。。

还有，没有创建一个avd的话，eclipse是不会自动生成R.java的，新建了一个avd之后就会自动生成R.java

/================================================================================\
自己在捣鼓Ubuntu时，当把GNOME桌面改为KDE桌面后，感觉很不爽，就把它重新弄回来了，但是就是鼠标指针没有改变，
在外观里也不能修改，后来经过查询，找到了一个好方法，现在总结在下面：
在终端输入：
sudo update-alternatives --config x-cursor-theme
然后选择你喜欢的鼠标样式，可以参考“外观”里的图标样式。
然后在“外观”里选择就可以了。
最后重启 电脑就OK了

\===============================================================================/
1.关于终端的快捷键：

Tab：tab键是比较常用的一个快捷键，它的作用是补全文件名或者路径。举例来说，输入”cd /ho”在按一下tab键，终端里就会显示”cd /home”了。如果您的文件夹下，有两个名字开头部分相同的文件，比如有”picture001.bmp”和”picture002.bmp”两个文 件，输入”rm pic”以后按下tab键，就会补全成”rm picture”，您可以接着输入剩下的名字。使用tab键补全还支持对于扩展名的识别，比如您的文件夹下有”TH2AD_CHS.exe文件和 TH2AD_CHS.ini文件，当您输入”wine TH”再按下tab后，会补全成”wine TH2AD_CHS.exe”而不会补全.ini文件，因为wine和.exe文件是关联的。

Ctrl+C：这个键可不是用来复制的，在中端下，按下Ctrl+C就代表结速当前终端执行的程序，按下的时候一定要慎重。

Ctrl+A：将光标移动到命令行的开始处。

Ctrl+E：将光标移动到命行令的结尾处。

Ctrl+U：删除行首到光标出的字符。

Ctrl+Z：把当前进程送到后台处理。

Ctrl+Alt+F1：切换到第一个文本终端。在Linux下你可以有多达六个不同的终端。

Ctrl+Alt+F7：切换到第一个图形用户界面（一般来说X-window在第七个终端）。

～：～好像不能算一个快捷键吧？～的作用是代替您的主文件夹，比如您的用户名是user，那么 “/home/user/桌面” 和 “~/桌面” 是等价的。

2.Gnome下的快捷键：

Alt + F1：类似Windows下的Win键，在GNOME中打开”应用程序”菜单(Applications)
（在KDE下同样适用。）

Alt + F2：类似Windows下的Win + R组合键，在GNOME中运行应用程序

Ctrl + Alt + D：类似Windows下的Win + D组合键，显示桌面。

Ctrl + Alt + L：锁定桌面并启动屏幕保护程序，取消锁定时需要输入密码。
（在KDE下有效。）

Alt + Tab：同Windows下的Alt + Tab组合键，在不同程序窗口间切换。

PrintScreen：全屏抓图，由于这个功能的反应有点慢，请不要反复按这个键，否则可能会死机。

Alt + PrintScreen：当前窗口抓图，弹出抓图对话框。
（在KDE下会将图片报存到剪贴板中。）

Ctrl + Alt + → / ←：在不同工作台间切换。
（在KDE下使用 Ctrl+Tab 键完成这个功能。）

Ctrl + Alt + Shift + → / ←：移动当前窗口到不同工作台

Ctrl+Alt+Shift+Fn：终端N或模拟终端N(n和N为数字1－6)

Ctrl+Alt+F7：返回桌面，如果您用 Ctrl+Alt+F1

Alt + F4：关闭窗口

Alt + F5：取消最大化窗口 (恢复窗口原来的大小)

Alt + F7：移动窗口 (注: 在窗口最大化的状态下无效)

Alt + F8：改变窗口大小 (注: 在窗口最大化的状态下无效)

Alt + F9：最小化窗口

Alt + F10：最大化窗口

Alt + Space：打开窗口的控制菜单 (点击窗口左上角图标出现的菜单)

单击鼠标滚轮：当您选中一段文字后，按下鼠标滚轮键，可以将选中的文字复制到鼠标所指的位置，在中端中也有效。
（KDE中未测试。）

Atl+单击鼠标拖动：移动窗口的位置。
（在KDE和Compiz中同样有效。）

3.Firefox的快捷键：

Alt+左方向键 或 Backspace：后退。
Shift+Backspace 或 Alt+右方向键：前进。
Alt+Home：首页。（这里指的是用户自定义的首页）
Ctrl+O：打开文件。
F5 或 Ctrl+R：重新载入。
Ctrl+F5 或 Ctrl+Shift+R：重新载入 (忽略缓存)。
Esc：停止。

End：到页面底部。
Home：到页面顶部。
F6 ：移到下一帧。
Shift+F6：移到上一帧。
Ctrl+U：页面源代码。
Ctrl+P：打印。
Ctrl+S：页面另存为。
Ctrl+”+”：放大文字。
Ctrl+”-”：缩小文字。
Ctrl+0：恢复文本大小。

Ctrl+F：本页查找。
F3：再次查找。
‘：输入查找链接。
/：输入查找文本。
Shift+F3：查找。
Ctrl+K 或 Ctrl+E：网页搜索。

Ctrl+W 或 Ctrl+F4：关闭标签。
Ctrl+Shift+W 或 Alt+F4：关闭窗口。
Ctrl+左方向键 或 Ctrl+上方向键：向左移动标签。
Ctrl+右方向键 或 Ctrl+下方向键：向右移动标签。
Ctrl+Home：移动标签到开头。
Ctrl+End：移动标签到结尾。
Ctrl+T：新建标签页。
Ctrl+N：新建窗口。
Ctrl+Tab 或 Ctrl+PageDown：下一个标签页。
Alt+Enter：在新标签页打开网址。
Ctrl+Shift+Tab 或 Ctrl+PageUp：前一个标签页。
Ctrl+Shift+T：撤销关闭标签页。
[1 到 8]： Ctrl+[1 到 8]：选择标签页。
Ctrl+9：选择最后标签页。

Ctrl+Shift+D:添加所有为书签。
Ctrl+D:添加当前为书签。
Ctrl+B 或 Ctrl+I：打开书签。
F7：插入浏览。
Ctrl+J：下载。
Ctrl+H：历史。
Ctrl+Shift+Del：清除私有数据。

Ctrl+Enter：补全 .com 地址。
Shift+Enter：补全 .net 地址。
Ctrl+Shift+Enter：补全 .org 地址。
Del：删除选定的自匹配输入。
F11：全屏。
Alt+D 或 F6 或 Ctrl+L：选择地址条。
Alt+上方向键 或 Alt+下方向键 或 F4：选择或管理搜索引擎。

Shift+向上滚动滚轮：前进。
Shift+向下滚动滚轮：后退。
在标签上按鼠标中键：关闭标签页。
Ctrl+滚动滚轮：改变页面比例。
在标签页栏双击鼠标：新建标签页。
Ctrl+Left-click 或 点击鼠标中键：在后台打开标签页。
Shift+Ctrl+Left-click 或 Shift+点击鼠标中键：在前台打开标签页。
Shift+Left-click：在新窗口打开。
Shift+Reload button：刷新 (覆盖缓存)。
Alt+Left-click：保存页面为。
Alt+滚轮：逐行滚动。

#####################################

Ubuntu操作基本快捷键
* 打开主菜单 = Alt + F1
* 运行 = Alt + F2
* 显示桌面 = Ctrl + Alt + d
* 最小化当前窗口 = Alt + F9
* 最大化当前窗口 = Alt + F10
* 关闭当前窗口 = Alt + F4
* 截取全屏 = Print Screen
* 截取窗口 = Alt + Print Screen
默认特殊快捷键
* 展示所有窗口程序 = F10
* 展示当前窗口最上层程序 = F11
* 展示当前窗口所有程序 = F12
* 切换窗口 = Alt + Tab
* 旋转3D桌面 = Ctrl + Alt + 左/右箭头（也可以把鼠标放在标题栏或桌面使用滚轮切换）
* 旋转3D桌面（ 活动窗口跟随） = Ctrl + Shift + Alt + 左/右箭头
* 手动旋转3D桌面 = Ctrl + Alt + 左键单击并拖拽桌面空白处
* 窗口透明/不透明 = possible with the “transset” utility or Alt + 滚轮
* 放大一次 = 超级键 + 右击
* 手动放大 = 超级键 + 滚轮向上
* 手动缩小 = 超级键 + 滚轮向下
* 移动窗口 = Alt + 左键单击
* 移动窗口时贴住边框 = 左键开始拖动后再 Ctrl + Alt
* 调整窗口大小 = Alt + 中击
* Bring up the window below the top window = Alt + middle-click
* 动态效果减速 = Shift + F10
* 水纹 = 按住 Ctrl+超级键
* 雨点 = Shift-F9
* 桌面展开＝ Ctrl + Alt + 下箭头，然后按住 Ctrl + Alt 和左/右箭头选择桌面


Alt + Shift+ Up Arrow - 以很酷的方式显示当前窗口
Nautilus

11. Shift+Ctrl+N - 新建文件夹, 很有用

12. Alt + Enter - 查看选择文件/文件夹的属性，代替单击右键选择属性

13. Ctrl + 1/2 - 改变文件夹视图查看方式，图标视图/列表视图

14. Ctrl + W - 关闭当前Nautilus窗口

15. Ctrl + Shift + W - 关闭所有Nautilus窗口

16. Ctrl+T - 在Nautilus中新建一个标签

17. Alt + Up/Down Arrow - 移动到父文件夹/选择的文件夹

18. Alt + Left/Right Arrow - 后退/前进

19. Alt + Home -直接移动到主文件夹

20. F9 - 开关显示Nautilus侧边栏

21. Ctrl + H -开关显示隐藏文件夹

程序中常用的快捷键：
Ctrl+N 新建
Ctrl+X 剪切
Ctrl+C 复制
Ctrl+V 粘贴
Ctrl+Z 撤销
Ctrl+S 保存

Ubuntu Gnome的桌面技巧：
===键盘类===
1.先同时按住 Alt + Ctrl 键，再按键盘上的左 右光标 键 可以切换工作区
2.web时按 "/" 键 等于 查找功能,桌面或者目录时按" /" 等于"打开.."
3.当前目录下快速文件(夹)定位, 直接输入文件(夹)名字
4.shift键 可以对scim的中英输入快速切换,windows下的智能ABC一样
5.alt+左右可以前进后退页面
6.屏幕锁定: Alt+Ctrl+L 等价于Windows中的Win键 + L, ctrl+alt+d 相当于Windows中的Win键 +D
——换句话说,Alt+Ctrl相当于Win键——
7.Ctrl+Alt+Shift+左右方向键，可以把当前窗口移到上一个或下一个桌面
8.Alt+Tab向左切换窗口,Alt+Shift+Tab向友切换窗口

===鼠标类===
1.直接拖拉在最大化时的窗口标题可以还原窗口大小,再拖放回去就最大化
2.在音量控制处用鼠标滚轮滚动可以直接调整音量,在任务栏中滚动滚轮可以切换任务栏,工作区则切换工作区
3.浏览网页的时候直接把图片落到保存目录既可下载
4.按鼠标滚轮即张贴, 同时按下鼠标 左右键等价于按鼠标中键 -->引伸到,在web上选中文字,直接双键(中键)可以张贴选中的文字
5.工作区里的小窗口可以在不同工作区内拖拉,即移动到....(工作区)的功能
6.shift + 鼠标滚轮 可以后退页面
7.鼠标中键点标题栏可以隐藏当前窗口
8.按住shift 拖动窗口可以吸附上下边缘的移动
9.直接将 文件管理器 中的文件拖到 GNOME终端 中就可以在终端中得到完整的路径名
10.修改目录图标：可将文件管理器中的图片直接拖到文件夹属性所在的图标上.
11.鼠标中键直接单击 滚动条 的空白处，屏幕即滚动到那处。
12.中键拖动图片到桌面，可选择设为墙纸


其他

22. Ctrl + Alt + L -锁屏

23. Alt + F1 - 打开应用程序菜单

24. Alt + F2 - 打开运行应用程序对话框

25. Win + 鼠标滚轮 - 放大/缩小屏幕

 

先来是GNOME下的快捷键，其实的kde和Xfce我用得比较少

通用快捷键

Alt + F1 类似Windows下的Win键，在GNOME中打开"应用程序"菜单(Applications)

Alt + F2 类似Windows下的Win + R组合键，在GNOME中运行应用程序

Ctrl + Alt + D 类似Windows下的Win + D组合键，显示桌面 ！

Ctrl + Alt + L 锁定桌面并启动屏幕保护程序

Alt + Tab 同Windows下的Alt + Tab组合键，在不同程序窗口间切换

PrintScreen 全屏抓图

Alt + PrintScreen 当前窗口抓图

Ctrl + Alt + → / ← 在不同工作台间切换

Ctrl + Alt + Shift + → / ← 移动当前窗口到不同工作台

Ctrl+Alt+Shift+Fn 终端N或模拟终端N(n和N为数字1－6)

Ctrl+Alt+F7 返回桌面

Ctrl+Alt+Shift+F8 未知（终端或模拟终端）
窗口操作快捷键

Alt + F4 关闭窗口

Alt + F5 取消最大化窗口 (恢复窗口原来的大小)

Alt + F7 移动窗口 (注: 在窗口最大化的状态下无效)

Alt + F8 改变窗口大小 (注: 在窗口最大化的状态下无效)

Alt + F9 最小化窗口

Alt + F10 最大化窗口

Alt + Space 打开窗口的控制菜单 (点击窗口左上角图标出现的菜单)
应用程序中的常用快捷键

(注: 并不适用于所有程序) 基本和win没什么区别

Ctrl+N 新建窗口

Ctrl+X 剪切

Ctrl+C 复制

Ctrl+V 粘贴

Ctrl+Z 撤销上一步操作

Ctrl+Shift+Z 重做刚撤销的一步操作

Ctrl+S 保存
文件浏览器（部分）

Ctrl+H 显示隐藏文件（切换键）

Ctrl+T 新建标签

Ctrl+W 关闭标签

Ctrl+Page Up 上一个标签

Ctrl+Page Down 下一个标签

Alt+N 切换到第N个标签（N为数字）
在Ubuntu中自定义快捷键

访问“System>Preferences>Keyboard Shortcuts”，选定想要设置的项目，然后键入快捷键即可生效。



还有一些终端输命令时常用到的快捷键

tab=补全
ctrl+a=开始位置
ctrl+e=最后位置
ctrl+k=删除此处至末尾所有内容
ctrl+u=删除此处至开始所有内容
ctrl+d=删除当前字母
ctrl+w=删除此处到左边的单词
ctrl+y=粘贴由ctrl+u，ctrl+d，ctrl+w删除的单词
ctrl+r=正在测试，还没弄明白，呵呵。
ctrl+l=相当于clear
ctrl+b=向回移动
ctrl+f=向前移动
ctrl+p=向上显示缓存命令
ctrl+n=向下显示缓存命令
ctrl+d=关闭终端
shift+上或下=终端上下滚动
shift+pgup或pgdown=终端上下翻页滚动
ctrl+shift+f=全屏（仅限于konsole）
ctrl+shift+n=新终端（terminal和konsole有所不同）
ctrl+c=终止

 

窗口管理

 

1. Win+E - 显示所有桌面，方便的左右选择。

2. Alt+Ctrl+Left/Right Arrow -切换桌面

3. Alt+Ctrl+Shift+Left/Right Arrow - 移动当前窗口到其他桌面

4. Alt + Shift+ Up Arrow - 以很酷的方式显示当前窗口

5. Alt+F9/F10 - 最小化/最大化当前窗口

6. Alt+F5 -不最大化当前窗口

7. Alt+F7 - 激活当前窗口的移动选项，你可以使用方向键移动当前窗口，甚至移动到其他桌面。

8. Alt+F8 - 用方向键调整当前窗口大小

9. Ctrl + Alt + D - 显示桌面/恢复当前窗口

10. Alt+ Tab - 切换窗口

Nautilus
11. Shift+Ctrl+N - 新建文件夹, 很有用

12. Alt + Enter - 查看选择文件/文件夹的属性，代替单击右键选择属性

13. Ctrl + 1/2 - 改变文件夹视图查看方式，图标视图/列表视图

14. Ctrl + W - 关闭当前Nautilus窗口

15. Ctrl + Shift + W - 关闭所有Nautilus窗口

16. Ctrl+T - 在Nautilus中新建一个标签

17. Alt + Up/Down Arrow - 移动到父文件夹/选择的文件夹

18. Alt + Left/Right Arrow - 后退/前进

19. Alt + Home -直接移动到主文件夹

20. F9 - 开关显示Nautilus侧边栏

21. Ctrl + H -开关显示隐藏文件夹

其他
22. Ctrl + Alt + L -锁屏

23. Alt + F1 - 打开应用程序菜单

24. Alt + F2 - 打开运行应用程序对话框

25. Win + 鼠标滚轮 - 放大/缩小屏幕
#########################################################################################################################################
Google Android代码包（机器代码包），包括主机编译工具、仿真环境。今天我们向大家介绍Google Android源代码包目录结构，Android代码包经过解压缩后，第一级别的目录和文件如下所示：
.
|-- Makefile        （全局的Makefile）
|-- bionic            （Bionic含义为仿生，这里面是一些基础的库的源代码）
|-- bootloader     （引导加载器）
|-- build               （build目录中的内容不是目标所用的代码，而是编译和配置所需要的脚本和工具）
|-- dalvik             （JAVA虚拟机）
|-- development （程序开发所需要的模板和工具）
|-- external         （目标机器使用的一些库）
|-- frameworks    （应用程序的框架层）
|-- hardware        （与硬件相关的库）
|-- kernel            （Linux2.6的源代码）
|-- packages        （Android的各种应用程序）
|-- prebuilt          （Android在各种平台下编译的预置脚本）
|-- recovery        （与目标的恢复功能相关）
`-- system          （Android的底层的一些库）




bionic目录展开一个级别的目录如下所示：
bionic/
|-- Android.mk
|-- libc
|-- libdl
|-- libm
|-- libstdc++
|-- libthread_db
`-- linker



bootloader目录展开的两个级别目录：
bootloader/
`-- legacy
    |-- Android.mk
    |-- README
    |-- arch_armv6
    |-- arch_msm7k
    |-- fastboot_protocol.txt
    |-- include
    |-- libboot
    |-- libc
    |-- nandwrite
    `-- usbloader



build目录展开的一个级别的目录如下所示：
build/
|-- buildspec.mk.default
|-- cleanspec.mk
|-- core                       （各种以mk为结尾的文件，它门是编译所需要的Makefile）
|-- envsetup.sh
|-- libs
|-- target                     （包含board和product两个目录，为目标所需要文件）
`-- tools                      （编译过程中主机所需要的工具，一些需要经过编译生成）


其中，core中的Makefile是整个Android编译所需要的真正的Makefile，它被顶层目录的Makefile引用。
envsetup.sh是一个在使用仿真器运行的时候，用于设置环境的脚本。
dalvik目录用于提供Android JAVA应用程序运行的基础————JAVA虚拟机。


development目录展开的一个级别的目录如下所示：
development
|-- apps                       （Android应用程序的模板）
|-- build                      （编译脚本模板）
|-- cmds
|-- data
|-- docs
|-- emulator                   （仿真相关）
|-- host                       （包含windows平台的一些工具）
|-- ide
|-- pdk
|-- samples                    （一些示例程序）
|-- simulator                  （大多是目标机器的一些工具）
`-- tools

在emulator目录中qemud是使用QEMU仿真时目标机器运行的后台程序，skins是仿真时手机的界面。
samples中包含了很多Android简单工程，这些工程为开发者学习开发Android程序提供了很大便利，可以作为模板使用。


external目录展开的一个级别的目录如下所示：
external/
|-- aes
|-- apache-http
|-- bluez
|-- clearsilver
|-- dbus
|-- dhcpcd
|-- dropbear
|-- elfcopy
|-- elfutils
|-- emma
|-- esd
|-- expat
|-- fdlibm
|-- freetype
|-- gdata
|-- giflib
|-- googleclient
|-- icu4c
|-- iptables
|-- jdiff
|-- jhead
|-- jpeg
|-- libffi
|-- libpcap
|-- libpng
|-- libxml2
|-- netcat
|-- netperf
|-- neven
|-- opencore
|-- openssl
|-- oprofile
|-- ping
|-- ppp
|-- protobuf
|-- qemu
|-- safe-iop
|-- skia
|-- sonivox
|-- sqlite
|-- srec
|-- strace
|-- tagsoup
|-- tcpdump
|-- tinyxml
|-- tremor
|-- webkit
|-- wpa_supplicant
|-- yaffs2
`-- zlib

在external中，每个目录表示Android目标系统中的一个模块，可能有一个或者若干个库构成。其中：
opencore为PV（PacketVideo），它是Android多媒体框架的核心。
webkit是Android网络浏览器的核心。
sqlite是Android数据库系统的核心。
openssl是Secure Socket Layer，一个网络协议层，用于为数据通讯提供安全支持。


frameworks目录展开的一个级别的目录如下所示：
frameworks/
|-- base
|-- opt
`-- policies

frameworks是Android应用程序的框架。
hardware是一些与硬件相关的库
kernel是Linux2.6的源代码

packages目录展开的两个级别的目录如下所示：
packages/
|-- apps
|   |-- AlarmClock
|   |-- Browser
|   |-- Calculator
|   |-- Calendar
|   |-- Camera
|   |-- Contacts
|   |-- Email
|   |-- GoogleSearch
|   |-- HTMLViewer
|   |-- IM
|   |-- Launcher
|   |-- Mms
|   |-- Music
|   |-- PackageInstaller
|   |-- Phone
|   |-- Settings
|   |-- SoundRecorder
|   |-- Stk
|   |-- Sync
|   |-- Updater
|   `-- VoiceDialer
`-- providers
    |-- CalendarProvider
    |-- ContactsProvider
    |-- DownloadProvider
    |-- DrmProvider
    |-- GoogleContactsProvider
    |-- GoogleSubscribedFeedsProvider
    |-- ImProvider
    |-- MediaProvider
    `-- TelephonyProvider

packages中包含两个目录，其中apps中是Android中的各种应用程序，providers是一些内容提供者（在Android中的一个数据源）。
packages中两个目录的内容大都是使用JAVA编写的程序，各个文件夹的层次结构是类似的。


prebuilt目录展开的一个级别的目录如下所示：
prebuilt/
|-- Android.mk
|-- android-arm
|-- common
|-- darwin-x86
|-- linux-x86
`-- windows


system目录展开的两个级别的目录如下所示：
system/
|-- bluetooth
|   |-- bluedroid
|   `-- brfpatch
|-- core
|   |-- Android.mk
|   |-- README
|   |-- adb
|   |-- cpio
|   |-- debuggerd
|   |-- fastboot
|   |-- include            （各个库接口的头文件）
|   |-- init
|   |-- libctest
|   |-- libcutils
|   |-- liblog
|   |-- libmincrypt
|   |-- libnetutils
|   |-- libpixelflinger
|   |-- libzipfile
|   |-- logcat
|   |-- logwrapper
|   |-- mkbootimg
|   |-- mountd
|   |-- netcfg
|   |-- rootdir
|   |-- sh
|   `-- toolbox
|-- extras
|   |-- Android.mk
|   |-- latencytop
|   |-- libpagemap
|   |-- librank
|   |-- procmem
|   |-- procrank
|   |-- showmap
|   |-- showslab
|   |-- sound
|   |-- su
|   |-- tests
|   `-- timeinfo
`-- wlan
    `-- ti 


=========================================================================================================================================
ListView实现自动滚动
 
由于这两天在做listView的东西，所以整理出来一些我个人认为比较特别的属性，通过设置这样的属性可以做出更加美观的列表 
首先是stackFromBottom属性，这只该属性之后你做好的列表就会显示你列表的最下面，值为true和false 
android:stackFromBottom="true" 
第二是 transciptMode属性，需要用ListView或者其它显示大量Items的控件实时跟踪或者查看信息，并且希望最新的条目可以自动滚动到可视范围内。通过设置的控件transcriptMode属性可以将Android平台的控件（支持ScrollBar）自动滑动到最底部。 
android:transcriptMode="alwaysScroll" 
第三cacheColorHint属性，很多人希望能够改变一下它的背景，使他能够符合整体的UI设计，改变背景背很简单只需要准备一张图片然后指定属性 android:background="@drawable/bg"，不过不要高兴地太早，当你这么做以后，发现背景是变了，但是当你拖动，或者点击list空白位置的时候发现ListItem都变成黑色的了，破坏了整体效果。 
如果你只是换背景的颜色的话，可以直接指定android:cacheColorHint为你所要的颜色，如果你是用图片做背景的话，那也只要将android:cacheColorHint指定为透明（#00000000）就可以了 
第四divider属性，该属性作用是每一项之间需要设置一个图片做为间隔，或是去掉item之间的分割线 
android:divider="@drawable/list_driver" 其中 @drawable/list_driver 是一个图片资源，如果不想显示分割线则只要设置为android:divider="@drawable/@null" 就可以了 
第五fadingEdge属性，上边和下边有黑色的阴影 
android:fadingEdge="none" 设置后没有阴影了~ 
第五scrollbars属性，作用是隐藏listView的滚动条， 
android:scrollbars="none"与setVerticalScrollBarEnabled(true);的效果是一样的，不活动的时候隐藏，活动的时候也隐藏 
第六fadeScrollbars属性，android:fadeScrollbars="true" 配置ListView布局的时候，设置这个属性为true就可以实现滚动条的自动隐藏和显示。 

如何让你的ListView实现自动滚动呢? Android其实已经考虑到ListView控件的智能滚动操作。直接在Layout中写即可，注意下面的stackFromBottom以及transcriptMode这两个属性。涉及代码如下: 
Xml代码 
<ListView android:id="listCWJ" 
android:layout_width="fill_parent" 
android:layout_height="fill_parent" 
android:stackFromBottom="true" 
android:transcriptMode="alwaysScroll" 
/>
分类: Android
---------------------------------------------------------------------------------------------------------------------------------------
一．创建xml文件，位置：drawable/xxx.xml,同目录下记得要放相关图片

 

<?xml version="1.0" encoding="utf-8" ?>   
<selector xmlns:android="http://schemas.android.com/apk/res/android"> 
<!-- 默认时的背景图片-->  
  <item android:drawable="@drawable/pic1" />    
<!-- 没有焦点时的背景图片 -->  
  <item android:state_window_focused="false"   
        android:drawable="@drawable/pic1" />   
<!-- 非触摸模式下获得焦点并单击时的背景图片 -->  
  <item android:state_focused="true" android:state_pressed="true"   android:drawable= "@drawable/pic2" /> 

<!-- 触摸模式下单击时的背景图片-->  

<item android:state_focused="false" android:state_pressed="true"   android:drawable="@drawable/pic3" />  

<!--选中时的图片背景-->  

  <item android:state_selected="true"   android:drawable="@drawable/pic4" />   

<!--获得焦点时的图片背景-->  
  <item android:state_focused="true"   android:drawable="@drawable/pic5" />   
</selector>
二.使用xml文件：

1.方法一：在listview中配置android:listSelector="@drawable/xxx
或者在listview的item中添加属性android：background="@drawable/xxx"

2.方法二：Drawable drawable = getResources().getDrawable(R.drawable.xxx);  
       ListView.setSelector(drawable);但是这样会出现列表有时候为黑的情况，需要加上：android:cacheColorHint="@android:color/transparent"使其透明。

相关属性：

android:state_selected是选中
android:state_focused是获得焦点
android:state_pressed是点击
android:state_enabled是设置是否响应事件,指所有事件

根据这些状态同样可以设置button的selector效果。也可以设置selector改变button中的文字状态。


以下是配置button中的文字效果：
drawable/button_font.xml
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_selected="true" android:color="#FFF" />
    <item android:state_focused="true" android:color="#FFF" />
    <item android:state_pressed="true" android:color="#FFF" />
    <item android:color="#000" />
</selector>
Button还可以实现更复杂的效果，例如渐变
drawable/button_color.xml
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">         / 
<item android:state_pressed="true">//定义当button 处于pressed 状态时的形态。 
                <shape>

                <gradient  android:startColor="#8600ff" /> 

                      <stroke   android:width="2dp" android:color="#000000" /> 
                       <corners android:radius="5dp" />  
                       <padding android:left="10dp" android:top="10dp" 
                                android:bottom="10dp" android:right="10dp"/>  
                 </shape>  
</item> 
<item android:state_focused="true">//定义当button获得 focus时的形态 
                 <shape> 
                       <gradient android:startColor="#eac100"/> 
                        <stroke android:width="2dp" android:color="#333333"  color="#ffffff"/> 
                         <corners android:radius="8dp" />   
                         <padding android:left="10dp" android:top="10dp" 
                                  android:bottom="10dp" android:right="10dp"/>                   
                </shape> 
 </item>
</selector> 
最后，需要在包含 button的xml文件里添加两项。例如main.xml 文件，需要在<Button />里加两项android：focusable="true" android:background="@drawable/button_color"

======================================================================================================================================
<LinearLayout
android:focusable="true"
android:focusableInTouchMode="true"
android:layout_width="0px"
android:layout_height="0px"/>
<四层上网机 （Vulcan）> Wed 13 Jun 2012 05:59:25 PM CST
定义Android Layout(XML)时，有四个比较特别的标签是非常重要的，其中有三个是与资源复用有关，分别是<viewStub/>, <requestFocus />, <merge /> and<include />。可是以往我们所接触的案例或者官方文档的例子都没有着重去介绍这些标签的重要性。

<viewStub  />: 此标签可以使UI在特殊情况下，直观效果类似于设置View的不可见性，但是其更大的(R)意义在于被这个标签所包裹的Views在默认状态下不会占用任何内存空间。viewStub通过include从外部导入Views元素。 
用法：通过android:layout来指定所包含的内容。默认情况下，ViewStub所包含的标签都属于visibility=GONE。viewStub通过方法inflate()来召唤系统加载其内部的Views。 
<ViewStub android:id="@+id/stub"
android:inflatedId="@+id/subTree"
android:layout="@layout/mySubTree"
android:layout_width="120dip"
android:layout_height="40dip" />
<include />:可以通过这个标签直接加载外部的xml到当前结构中，是复用UI资源的常用标签。 
用法：将需要复用xml文件路径赋予include标签的Layout属性。 
<include android:id="@+id/cell1" layout="@layout/ar01" />
<include android:layout_width="fill_parent" layout="@layout/ar02" />
<requestFocus />: 标签用于指定屏幕内的焦点View。 
用法: 将标签置于Views标签内部 <!– Easy AdSenser V2.37 –><!– Post[count: 2] –> 
<EditText id="@+id/text"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
             android:layout_weight="0"
             android:paddingBottom="4">
       <requestFocus />
</EditText>
<merge />: 
单独将<merge />标签做个介绍，是因为它在优化UI结构时起到很重要的作用。目的是通过删减多余或者额外的层级，从而优化整个Android Layout的结构。

将通过一个例子来了解这个标签实际所产生的作用，这样可以更直观的了解<merge/>的用法。

建立一个简单的Layout，其中包含两个Views元素：ImageView和TextView 默认状态下我们将这两个元素放在FrameLayout中。其效果是在主视图中全屏显示一张图片，之后将标题显示在图片上，并位于视图的下方。以下是xml代码：

<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">

    <ImageView
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"

        android:scaleType="center"
        android:src="@drawable/golden_gate" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="20dip"
        android:layout_gravity="center_horizontal|bottom"

        android:padding="12dip"

        android:background="#AA000000"
        android:textColor="#ffffffff"

        android:text="Golden Gate" />

</FrameLayout>
应用上边的Layout运行的视图为：

启动 tools> hierarchyviewer.bat工具查看当前UI结构视图：





我们可以很明显的看到由红色线框所包含的结构出现了两个framelayout节点，很明显这两个完全意义相同的节点造成了资源浪费（这里可以提醒大家在开发工程中可以习惯性的通过hierarchyViewer查看当前UI资源的分配情况），那么如何才能解决这种问题呢（就当前例子是如何去掉多余的frameLayout节点）？这时候就要用到<merge />标签来处理类似的问题了。我们将上边xml代码中的framLayout替换成merge：

<!– Easy AdSenser V2.37 –><!– Post[count: 2] –>

<merge xmlns:android="http://schemas.android.com/apk/res/android">

    <ImageView
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"

        android:scaleType="center"
        android:src="@drawable/golden_gate" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="20dip"
        android:layout_gravity="center_horizontal|bottom"

        android:padding="12dip"

        android:background="#AA000000"
        android:textColor="#ffffffff"

        android:text="Golden Gate" />

</merge>
运行程序后在Emulator中显示的效果是一样的，可是通过hierarchyviewer查看的UI结构是有变化的，当初多余的 FrameLayout节点被合并在一起了，或者可以理解为将merge标签中的子集直接加到Activity的FrameLayout跟节点下（这里需要提醒大家注意：所有的Activity视图的根节点都是frameLayout）。如果你所创建的Layout并不是用framLayout作为根节点（而是应用LinerLayout等定义root标签），就不能应用上边的例子通过merge来优化UI结构。



除了上边的例子外，meger还有另外一个用法

当应用Include或者ViewStub标签从外部导入xml结构时，可以将被导入的xml用merge作为根节点表示，这样当被嵌入父级结构中后可以很好的将它所包含的子集融合到父级结构中，而不会出现冗余的节点。

另外有两点需要特别注意：

<merge />只可以作为xml layout的根节点。
当需要扩充的xml layout本身是由merge作为根节点的话，需要将被导入的xml layout置于 viewGroup中，同时需要设置attachToRoot为True。（更多说明请参见inflate()文档）

-----------------------------------------------------------------------------------------------------------------------------------------

在当一个活动接收到焦点时，将被要求绘制它的布局。 
Android框架将处理这个绘画的过程，但是活动必须提供它的布局层次的根节点。 
绘画从布局的根节点开始。 
它被要求来测量和绘制布局树。 
绘画通过遍历布局树并渲染每个和失效区域相交的视图来处理。 
相应的，每个视图组负责请求绘制它的子视图（通过draw() 方法）而每个视图负责画它自己。因为这个树是顺序遍历的，这意味着先画父节点（也就是在屏幕后面），然后按照树中出现的顺序画其同层次节点。 
框架将不会画不在失效区域的视图，而且还将会帮你画视图背景。 
你可以强制一个视图被重画，通过调用invalidate()。 
 
绘画布局共有两步：一个度量过程和一个布局过程。 
度量过程在measure(int, int)里实现且是一个自顶向下的视图树遍历。 
每个视图在递归时往下推送尺寸规格。 
在度量过程的最后，每个视图都已经保存了自己的度量。 

第二个过程发生在layout(int, int, int, int) 中并且也是自顶向下。 
在这个过程中，每个父节点负责定位它的所有子节点，通过使用在度量过程中计算得到的尺寸。 
当一个视图的measure()方法返回时，它的getMeasuredWidth()和getMeasuredHeight() 值必须被设置，以及所有这个视图子节点的值。一个视图的度量的宽度和高度值必须符合父视图引入的限制。这确保在度量过程之后，所有父节点接受所有它们的子节点的度量值。 
一个父视图可能会在其子视图上多次调用measure()方法。 
比如，父视图可能会通过未指定的尺寸调用measure来发现它们的大小，然后使用实际数值再次调用measure()，如果所有子视图未做限制的尺寸总合过大或过小（也即是，如果子视图之间不能对各自占据的空间达成共识的话，父视图将会干预并设置第二个过程的规则）。 

要开始一个布局，可调用requestLayout()。这个方法通常在视图认为它自己不再适合它当前的边界的情况下被调用。 
度量过程使用两个类来交流尺寸。 
View.MeasureSpec类被视图用来告诉它们的父视图它们想如何被度量和定位。 
基础的LayoutParams类仅仅描述了视图想有多大（高和宽）。 
对于每个维度，它可以指定下面之一： 
·         一个准确的数值 
·         FILL_PARENT, 这意味着视图想和父视图一样大（减掉填充padding）。 
·         WRAP_CONTENT, 这意味着视图只想有刚好包装其内容那么大（加上填充） 
对于不同的ViewGroup子类，有相应的LayoutParams子类。 
比如，相对布局RelativeLayout有它自己的LayoutParams子类，这包含了能够让子视图横向和竖向居中显示的能力。 
度量规格（MeasureSpecs）被用来沿着树从父到子的下传度量需求。 
一个MeasureSpecs可以是下面三种模式之一： 
·         UNSPECIFIED: 这被父视图用来决定其子视图期望的尺寸。 
比如，一个线性布局可能在它的子视图上调用measure() on its child，通过设置其高度为UNSPECIFIED 以及一个宽度为EXACTLY 240，来找出这个子视图在给定240像素宽度的情况下需要显示多高。 
·         EXACTLY: 这被父视图用来给子视图强加一个准确的尺寸。子视图必须使用这个大小，并确保其所有的后代将适合这个尺寸。 
·         AT_MOST: 这被父视图用来给子视图强加一个最大尺寸。子视图必须确保它自己以及所有的后代都适合这个尺寸。 

-----------------------------------------------------------------------------------------------------------------------------------------

上面是通过按下实体键盘上的搜索按钮弹出的一个搜索对话框,当然搜索关键词提示是少不了的。如何实现呢？慢慢来！呵呵。

        一、配置搜索描述文件

       在res中的xml文件加创建sreachable.xml，内容如下：

java代码：
<searchable xmlns:android="http://schemas.android.com/apk/res/android" android:label="@string/search_label" 
android:hint="@string/search_hint" android:searchSettingsDescription="@string/settings_description"> 
</searchable>


       二、创建SearchableMusicActivity.java 至少需要实现onCreate方法显示出来吧。

       三、配置AndroidManifest.xml

java代码：
<?xml version="1.0" encoding="utf-8"?> 
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.halzhang.android.search" android:versionCode="1" 
android:versionName="1.0">
<application 
android:icon="@drawable/icon" 
android:label="@string/app_name"> 
<activity android:name=".SearchableMusicActivity"
android:label="@string/app_name" 
android:theme="@android:style/Theme.NoTitleBar"> 
<intent-filter> 
<action android:name="android.intent.action.MAIN" /> 
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter> 
<intent-filter> 
<!-- 配置action --> 
<action android:name="android.intent.action.SEARCH" />
</intent-filter> 
<!-- 指定搜索的配置文件 --> 
<meta-data android:name="android.app.searchable" 
android:resource="@xml/searchable" /> 
</activity> 
<meta-data 
android:name="android.app.default_searchable"
android:value=".SearchableMusicActivity" />


       Android已经为我们创建了一个默认的，我们只需要继承 SearchRecentSuggestionProvider 就稍做修改就可以了。

java代码：
import android.content.SearchRecentSuggestionsProvider; 
/** 
* 搜索提示 
* 
* @author Hanguo 7: 
* @version 2011-1-5上午11:51:39 
*/ 
public class SearchSuggestionsProvider extends SearchRecentSuggestionsProvider { 
//记住这个哦 
public final static String AUTHORITY = "searchprovider"; 
public final static int MODE = DATABASE_MODE_QUERIES; 
public SearchSuggestionsProvider() { 
setupSuggestions(AUTHORITY, MODE); 
} 
}


       2.配置searchable.xml

java代码：
<?xml version="1.0" encoding="utf-8"?> 
<searchable xmlns:android="http://schemas.android.com/apk/res/android"  android:label="@string/search_label" 
android:hint="@string/search_hint" android:searchSettingsDescription="@string/search_settings_description" android:searchSuggestAuthority="searchprovider"  android:searchSuggestIntentAction="android.intent.action.SEARCH"  android:searchSuggestThreshold="1" 
android:includeInGlobalSearch="true" 
android:searchSuggestSelection=" ?" > 
</searchable>

----------------------------------------------------------------------------------------------------------------------------------------
/* listView在开始绘制的时候，系统首先调用getCount（）函数，根据他的返回值得到listView的长 
 * 度（这也是为什么在开始的第一张图特别的标出列表长度），然后根据这个长度，调用getView（）逐 
 * 一绘制每一行。如果你的getCount（）返回值是0的话，列表将不显示同样return 1，就只显示一行。 
 * 系统显示列表时，首先实例化一个适配器（这里将实例化自定义的适配器）。当手动完成适配时，必 
 * 须手动映射数据，这需要重写getView（）方法。系统在绘制列表的每一行的时候将调用此方法。 
 * getView()有三个参数，position表示将显示的是第几行，covertView是从布局文件中inflate来的 
 * 布局。我们用LayoutInflater的方法将定义好的main.xml文件提取成View实例用来显示。然后 
 * 将xml文件中的各个组件实例化（简单的findViewById()方法）。这样便可以将数据对应到各个组件 
 * 上了。但是按钮为了响应点击事件，需要为它添加点击监听器，这样就能捕获点击事件。至此一个自定 
 * 义的listView就完成了，现在让我们回过头从新审视这个过程。系统要绘制ListView了，他首先获得 
 * 要绘制的这个列表的长度，然后开始绘制第一行，怎么绘制呢？调用getView()函数。在这个函数里面 
 * 首先获得一个View（实际上是一个ViewGroup），然后再实例并设置各个组件，显示之。好了，绘制完 
 * 这一行了。那 再绘制下一行，直到绘完为止。在实际的运行过程中会发现listView的每一行没有焦点 
 * 了，这是因为Button抢夺了listView的焦点，只要布局文件中将Button设置为没有焦点就OK了*/  
  
public class MyListView4 extends ListActivity {  
  
    private List<Map<String, Object>> mData;  
  
    @Override  
    public void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        mData = getData();  
        MyAdapter adapter = new MyAdapter(this);  
        setListAdapter(adapter);  
    }  
  
    private List<Map<String, Object>> getData() {  
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();  
  
        Map<String, Object> map = new HashMap<String, Object>();  
        map.put("title", "G1");  
        map.put("info", "google 1");  
        map.put("img", R.drawable.i1);  
        list.add(map);  
  
        map = new HashMap<String, Object>();  
        map.put("title", "G2");  
        map.put("info", "google 2");  
        map.put("img", R.drawable.i2);  
        list.add(map);  
  
        map = new HashMap<String, Object>();  
        map.put("title", "G3");  
        map.put("info", "google 3");  
        map.put("img", R.drawable.i3);  
        list.add(map);  
  
        return list;  
    }  
  
    // ListView 中某项被选中后的逻辑  
    @Override  
    protected void onListItemClick(ListView l, View v, int position, long id) {  
        Log.v("MyListView4-click", (String) mData.get(position).get("title"));  
    }  
  
    /** 
     * listview中点击按键弹出对话框 
     */  
    public void showInfo() {  
        new AlertDialog.Builder(this).setTitle("我的listview")  
                .setMessage("介绍...")  
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {  
                    @Override  
                    public void onClick(DialogInterface dialog, int which) {  
                    }  
                }).show();  
    }  
  
    public final class ViewHolder {  
        public ImageView img;  
        public TextView title;  
        public TextView info;  
        public Button viewBtn;  
    }  
  
    public class MyAdapter extends BaseAdapter {  
  
        private LayoutInflater mInflater;  
  
        public MyAdapter(Context context) {  
            this.mInflater = LayoutInflater.from(context);  
        }  
  
        @Override  
        public int getCount() {  
            // TODO Auto-generated method stub  
            return mData.size();  
        }  
  
        @Override  
        public Object getItem(int arg0) {  
            // TODO Auto-generated method stub  
            return null;  
        }  
  
        @Override  
        public long getItemId(int arg0) {  
            // TODO Auto-generated method stub  
            return 0;  
        }  
  
        @Override  
        public View getView(int position, View convertView, ViewGroup parent) {  
            // 显示优化（只要之前显示过的就可以不再再次从布局文件读取，直接从缓存中读取——ViewHolder的作用）  
            // 其实是setTag和getTag中Tag的作用  
            ViewHolder holder = null;  
            if (convertView == null) {// 如果是第一次显示该页面(要记得保存到viewholder中供下次直接从缓存中调用)  
  
                holder = new ViewHolder();  
  
                convertView = mInflater.inflate(R.layout.main, null);  
                // 以下为保存这一屏的内容，供下次回到这一屏的时候直接refresh，而不用重读布局文件  
                holder.img = (ImageView) convertView.findViewById(R.id.img);  
                holder.title = (TextView) convertView.findViewById(R.id.title);  
                holder.info = (TextView) convertView.findViewById(R.id.info);  
                holder.viewBtn = (Button) convertView  
                        .findViewById(R.id.view_btn);  
                convertView.setTag(holder);  
  
            } else {// 如果之前已经显示过该页面，则用viewholder中的缓存直接刷屏  
  
                holder = (ViewHolder) convertView.getTag();  
            }  
  
            holder.img.setBackgroundResource((Integer) mData.get(position).get(  
                    "img"));  
            holder.title.setText((String) mData.get(position).get("title"));  
			
			holder.setId(mData.get(position));

            holder.info.setText((String) mData.get(position).get("info"));  
  
            holder.viewBtn.setOnClickListener(new View.OnClickListener() {  
  
                @Override  
                public void onClick(View v) {  
                    showInfo();  
                }  
            });  
            return convertView;  
        }  
    }  
}  
==========================================================================================\
环境变量设置
转自：http://blog.sina.com.cn/s/blog_52ffdb690100i3yq.html
作者: 心的港湾--一眼万年
转自：http://baobaoyangzhou.blog.163.com/blog/static/117831250201010595251220/
作者：小鲍
转自：http://www.linuxidc.com/Linux/2010-08/27736.htm
来源：Ubuntu社区  作者：kjqin


环境变量是和Shell紧密相关的，用户登录系统后就启动了一个Shell。对于Linux来说一般是bash，但也可以重新设定或切换到其它的 Shell。对于UNIX，可能是CShelll。环境变量是通过Shell命令来设置的，设置好的环境变量又可以被所有当前用户所运行的程序所使用。对于bash这个Shell程序来说，可以通过变量名来访问相应的环境变量，通过export来设置环境变量。下面通过几个实例来说明。

1)etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.
并从/etc/profile.d目录的配置文件中搜集shell的设置.
注：在这里我们设定是为所有用户可使用的全局变量。

2)/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.

3)~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
注：~在LINUX下面是代表HOME这个变量的。
另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是~/.bash_profile； ~/.bash_login或 ~/.profile其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如我用的是Ubuntu，我的用户文件夹下默认的就只有~/.profile文件。
4)~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.
 
至此我们可以对PATH变量进行修改了：
方法一：直接修改~/.profile文件：
即通过输入shell ：vi ~/.profile打开文件，
在文件的最后看到如下代码：
fi
# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi
在最后上如下代码：
fi
    PATH="$HOME/bin:$PATH:#####"
fi
####代表用户要添加的PATH值，如多个中间用冒号（：）隔开。
 
方法二：通过shell命令export实现：
echo $PATH 用于查看当前PATH的值
export PATH=$PATH:#####
用于设置PATH的值
如要将/home/houjx加入到PATH中可以用
export PATH=$PATH:/home/houjx
可看到如下结果：
houjx@ubuntu:~$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
houjx@ubuntu:~$ export PATH=$PATH:/home/houjx
houjx@ubuntu:~$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/houjx
houjx@ubuntu:~$
   注：但应该注意这样设置（方法二）的PATH变量只是对于现在的Terminal有效，关闭当前的   
      Terminal在开启一个，其对应的PATH是不变的，还 
      是/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

1)etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.
并从/etc/profile.d目录的配置文件中搜集shell的设置.
注：在这里我们设定是为所有用户可使用的全局变量。

2)/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.

3)~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
注：~在LINUX下面是代表HOME这个变量的。
另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是~/.bash_profile； ~/.bash_login或 ~/.profile其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如我用的是Ubuntu，我的用户文件夹下默认的就只有~/.profile文件。

4)~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.
(注：这个文件是 .开头的，所以在文件夹中被隐藏了)
那么我们如何添加自己定义的环境变量呢？
用记事本打开这个文件，然后在里面最后写上:
export xiaokang=xiaokang


然后保存，这样每次打开一个新的terminal的时候，我们这个变量就生效了。记住，如果你已经打开一个terminal，然后你修改了这个文件，那么在这个terminal下是不会生效的。一般情况用户最好在这里进行修改，但是有时候会覆盖父级的变量，比如PATH是ROOT设定的，但是如果你在这个文件里面写了PATH=xx,那么将来所有的PATH都成了xx了，所以我们应该在这个文件中写为：  
PATH＝$PATH:xx
这样就把原来的和你自己的一起加上了。而且注意在LINUX系统下用：分割表示并列，而不是windo的；


我再补充一些测试：
比如往~/.bashrc最后添加环境变量jat:

nano ~/.bashrc(不要忘了bashrc前面的点，如果忘了名字，只需记住带有bash字样，ls -al ~ | grep bash查找即可)

# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
export XMODIFIERS="@im=ibus"
export QT_IM_MODULE=ibus
我这里已经有设置过一些环境变量了，跟ibus相关的。
我在后面添加:
export jat=jat1
保存后，另开一个shell验证（因为这个文件是在新开shell时读取的，对于当前shell并不生效）
验证方法有三种：
1，执行echo $jat
2,执行export | grep -i jat
可以看到有一行：
declare -x jat="jat1"
3,或者也可以通过env | grep -i jat查看，结果是一样的。


如果要使用临时的环境变量，那么在当前shell使用export key=value就可以了，关闭shell之后这些变量就不存在了。

需要注意的是，有时候系统变量在脚本中也不起作用，这时可能需要自己手动修改脚本，加上相应变量声明。


1.首先安装build-essential：
sudo apt-get install build-essential
2.将友善之壁光盘中的arm-linux-gcc-4.3.2.tgz 拷贝到某个文件夹下,从终端进入该文件夹，进行解压：
sudo tar -zxvf arm-linux-gcc-4.3.2.tgz -C /
NOTE：配置项的C是大写，且C后面有个空格。
3.添加环境变量：
这一步是我耗时间最长的，关于这一步网上也有很多中说法:
1>sudo gedit /root/.bashrc : 在最后一行添加exprot PATH=$PATH:/usr/local/arm/4.3.2/bin。我不知道其
它linux系统行不行，反正我在Ubuntu 10.04下是不行，运行arm-linux-gcc -v 提示:
arm-linux-gcc:command not found。
2>先gedit ~/.profile,然后在最后一行添加：export PATH=$PATH:/usr/local/arm/4.3.2/bin，接着source
~/.profile，说是可以立即生效，这种是可以，但是我的总是只能使用一次，如果把终端关掉重新运行
arm-linux-gcc -v，还是提示command not found.
3> sudo gedit /etc/environment，在最后一个:号之后和“号之前添加/usr/local/arm/4.3.2/bin:，OK！
<四层上网机 （Vulcan）> Mon 03 Sep 2012 01:53:47 PM CST
Ubuntu设置环境变量  

2011-01-29 22:19:30|  分类： linux |  标签：bashrc  path  文件  shell  profile   |字号 订阅
添加环境变量：

方法一：

$ vi ~/.bashrc
在最后一行添加PATH=$PATH:/my_new_path:

$source ~/.bashrc

方法二：注意：修改环境变量PATH。具体：修改/etc/bash.bashrc文件（所有用户都可用）

$sudo vim /etc/bash.bashrc 
在文件末尾添加：
export PATH=$PATH:/my_new_path:

修改PATH后，关掉终端，重新打开终端（或重启）

背景资料：（转载）

环境变量是和Shell紧密相关的，用户登录系统后就启动了一个Shell。对于Linux来说一般是bash，但也可以重新设定或切换到其它的 Shell。对于UNIX，可能是CShelll。环境变量是通过Shell命令来设置的，设置好的环境变量又可以被所有当前用户所运行的程序所使用。对于bash这个Shell程序来说，可以通过变量名来访问相应的环境变量，通过export来设置环境变量。下面通过几个实例来说明。

1)etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.
并从/etc/profile.d目录的配置文件中搜集shell的设置.
注：在这里我们设定是为所有用户可使用的全局变量。
2)/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.
3)~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
注：~在LINUX下面是代表HOME这个变量的。
另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是~/.bash_profile； ~/.bash_login或 ~/.profile其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如我用的是Ubuntu，我的用户文件夹下默认的就只有~/.profile文件。
4)~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.
(注：这个文件是 .开头的，所以在文件夹中被隐藏了)
那么我们如何添加自己定义的环境变量呢？
用记事本打开这个文件，然后在里面最后写上:
xiaokang=kangkang
然后保存，这样每次打开一个新的terminal的时候，我们这个变量就生效了。记住，如果你已经打开一个terminal，然后你修改了这个文件，那么在这个terminal下是不会生效的。一般情况用户最好在这里进行修改，但是有时候会覆盖父级的变量，比如PATH是ROOT设定的，但是如果你在这个文件里面写了PATH=xx,那么将来所有的PATH都成了xx了，所以我们应该在这个文件中写为：  
PATH＝$PATH:xx
这样就把原来的和你自己的一起加上了。而且注意在LINUX系统下用：分割表示并列，而不是windo的；
3和4都是在用户目录下的，他们唯一的不同是: .bash_profile只能在登录的时候启动一次。在我的Ubuntu里面这个3文件似乎没有。
5)~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.
另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是\"父子\"关系.

~/.bash_profile 是交互式、login 方式进入 bash 运行的
~/.bashrc 是交互式 non-login 方式进入 bash 运行的
通常二者设置大致相同，所以通常前者会调用后者。

好的，总结一下他们的执行方式：
当你登录并且登录shell是bash时,bash首先执行/etc/profile文件中的命令(如果该文件存在),然后它顺序寻找~ /.bash_profile,~/.bash_login或~/.profile文件,并执行找到的第一个可读文件中的命令.当登录bash退出时,它 将执行~/.bash_logout文件中的命令.
当启动一个交互的bash时,它将执行~/.bashrc文件中的命令(如果该文件存在并且可读).当非交互地启动以运行一个shell脚本时,bash将查找bash_env环境变量,确定执行文件的名称.


第二篇资料
在登录Linux时要执行文件的过程如下：
在刚登录Linux时，首先启动 /etc/profile 文件，然后再启动用户目录下的~/.bash_profile； ~/.bash_login或 ~/.profile文件中的

 其中一个(根据不同的linux操作系统的不同，命名不一样！！！！！！！！！！在我的Ubuntu里面只有~/.profile)，

 执行的顺序为：~/.bash_profile、 ~/.bash_login、 ~/.profile。
如果 ~/.bash_profile文件存在的话，一般还会执行 ~/.bashrc文件。

因为在 ~/.bash_profile文件中一般会有下面的代码：
if [ -f ~/.bashrc ] ; then
. ./bashrc
fi
~/.bashrc中，一般还会有以下代码：
if [ -f /etc/bashrc ] ; then
. /bashrc
fi
所以，~/.bashrc会调用 /etc/bashrc文件。最后，在退出shell时，还会执行 ~/.bash_logout文件。
执行顺序为：/etc/profile -> (~/.bash_profile | ~/.bash_login | ~/.profile) -> ~/.bashrc -> /etc/bashrc -> ~/.bash_logout
关于各个文件的作用域，在网上找到了以下说明：
（1）/etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。
（2）/etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。
（3）~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。
（4）~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。
（5）~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.
另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是"父子"关系。

（6）~/.bash_profile 是交互式、login 方式进入 bash 运行的~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。
/etc/profile和/etc/environment等各种环境变量设置文件的用处

先将export LANG=zh_CN加入/etc/profile ,退出系统重新登录，登录提示显示英文。
将/etc/profile 中的export LANG=zh_CN删除，将LNAG=zh_CN加入/etc/environment，退出系统重新登录，登录提示显示中文。
用户环境建立的过程中总是先执行/etc/profile然后在读取/etc/environment。为什么会有如上所叙的不同呢？
应该是先执行/etc/environment，后执行/etc/profile。
/etc/environment是设置整个系统的环境，而/etc/profile是设置所有用户的环境，前者与登录用户无关，后者与登录用户有关。
系统应用程序的执行与用户环境可以是无关的，但与系统环境是相关的，所以当你登录时，你看到的提示信息，象日期、时间信息的显示格式与系统环境的LANG是相关的，缺省LANG=en_US，如果系统环境LANG=zh_CN，则提示信息是中文的，否则是英文的。

对于用户的SHELL初始化而言是先执行/etc/profile,再读取文件/etc/environment.对整个系统而言是先执行/etc/environment。这样理解正确吗？
/etc/enviroment --> /etc/profile --> $HOME/.profile -->$HOME/.env (如果存在)
/etc/profile 是所有用户的环境变量
/etc/enviroment是系统的环境变量
登陆系统时shell读取的顺序应该是
/etc/profile ->/etc/enviroment -->$HOME/.profile -->$HOME/.env
原因应该是jtw所说的用户环境和系统环境的区别了
如果同一个变量在用户环境(/etc/profile)和系统环境(/etc/environment)有不同的值那应该是以用户环境为准了。


221.179.173.170

